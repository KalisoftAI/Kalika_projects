[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "karna zaroori hai",
        "importPath": "django.http import JsonResponse # JsonResponse",
        "description": "django.http import JsonResponse # JsonResponse",
        "isExtraImport": true,
        "detail": "django.http import JsonResponse # JsonResponse",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "importPath": "catalog.views",
        "description": "catalog.views",
        "isExtraImport": true,
        "detail": "catalog.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "karein agar AWS_S3_BUCKET_NAME use ho raha hai",
        "importPath": "django.conf import settings # settings ko",
        "description": "django.conf import settings # settings ko",
        "isExtraImport": true,
        "detail": "django.conf import settings # settings ko",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ecommerce.accounts.migrations.0001_initial",
        "description": "ecommerce.accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "ecommerce.accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "ecommerce.accounts.apps",
        "description": "ecommerce.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "ecommerce.accounts.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "ecommerce.accounts.forms",
        "description": "ecommerce.accounts.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ('username', 'email', 'password1', 'password2')",
        "detail": "ecommerce.accounts.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "ecommerce.accounts.models",
        "description": "ecommerce.accounts.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    email = models.EmailField(unique=True)\n    groups = models.ManyToManyField(\n        'auth.Group',\n        related_name='customuser_set',\n        blank=True,\n        help_text='The groups this user belongs to.',\n        verbose_name='groups',\n    )\n    user_permissions = models.ManyToManyField(",
        "detail": "ecommerce.accounts.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.accounts.urls",
        "description": "ecommerce.accounts.urls",
        "peekOfCode": "app_name = 'accounts'\nurlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('register/', views.register_view, name='register'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "ecommerce.accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.accounts.urls",
        "description": "ecommerce.accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('register/', views.register_view, name='register'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "ecommerce.accounts.urls",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('catalog:home')\n        else:\n            messages.error(request, 'Invalid username or password.')",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def register_view(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)  # Use CustomUserCreationForm\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Registration successful. Please log in.')\n            return redirect('accounts:login')  # Redirect to login page\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('catalog:home')",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('catalog:home')\n        else:",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "CartConfig",
        "kind": 6,
        "importPath": "ecommerce.cart.apps",
        "description": "ecommerce.cart.apps",
        "peekOfCode": "class CartConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cart'",
        "detail": "ecommerce.cart.apps",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "ecommerce.cart.models",
        "description": "ecommerce.cart.models",
        "peekOfCode": "class CartItem(models.Model):\n    session_key = models.CharField(max_length=40)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.quantity} x {self.product.product_title}\"\n    class Meta:\n        db_table = 'cart_cartitem'",
        "detail": "ecommerce.cart.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.cart.urls",
        "description": "ecommerce.cart.urls",
        "peekOfCode": "app_name = 'cart'\nurlpatterns = [\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('', views.view_cart, name='view_cart'),\n    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),\n    path('checkout/', views.checkout, name='checkout'),\n    path('view/', views.view_cart, name='view_cart'),\n    path('thankyou/', views.thankyou, name='thankyou'), \n    path('proceed-to-thankyou/', views.proceed_to_thankyou, name='proceed_to_thankyou'),\n    path('update_quantity/', views.update_cart_quantity, name='update_cart_quantity'),",
        "detail": "ecommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.cart.urls",
        "description": "ecommerce.cart.urls",
        "peekOfCode": "urlpatterns = [\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('', views.view_cart, name='view_cart'),\n    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),\n    path('checkout/', views.checkout, name='checkout'),\n    path('view/', views.view_cart, name='view_cart'),\n    path('thankyou/', views.thankyou, name='thankyou'), \n    path('proceed-to-thankyou/', views.proceed_to_thankyou, name='proceed_to_thankyou'),\n    path('update_quantity/', views.update_cart_quantity, name='update_cart_quantity'),\n]",
        "detail": "ecommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def add_to_cart(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_item, created = CartItem.objects.get_or_create(\n        session_key=session_key,\n        product=product,\n        defaults={'quantity': 1}\n    )",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "view_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def view_cart(request):\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_items = CartItem.objects.filter(session_key=session_key)\n    total = sum(item.quantity * item.product.price for item in cart_items)\n    for item in cart_items:\n        item.subtotal = item.quantity * item.product.price\n        item.product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, item.product.image_url) if item.product.image_url else None\n        logger.debug(f\"Cart item {item.id}: s3_image_url = {item.product.s3_image_url}\")",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def remove_from_cart(request, item_id):\n    if request.method == 'POST':\n        try:\n            cart_item = CartItem.objects.get(id=item_id, session_key=request.session.session_key)\n            cart_item.delete()\n            messages.success(request, 'Item cart se hata diya gaya.')\n        except CartItem.DoesNotExist:\n            logger.warning(f\"CartItem id {item_id} session {request.session.session_key} ke liye nahi mila\")\n            messages.error(request, 'Item aapke cart mein nahi mila.')\n        return redirect('cart:view_cart')",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "update_cart_quantity",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def update_cart_quantity(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            item_id = data.get('item_id')\n            quantity = data.get('quantity')\n            cart_item = CartItem.objects.get(id=item_id, session_key=request.session.session_key)\n            if quantity > 0:\n                cart_item.quantity = quantity\n                cart_item.save()",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def checkout(request):\n    if not request.session.session_key:\n        logger.info(\"Koi session key nahi, naya session banaya ja raha hai\")\n        request.session.create()\n    session_key = request.session.session_key\n    is_punchout = request.session.get('is_punchout', False)\n    punchout_return_url = request.session.get('punchout_return_url', 'http://127.0.0.1:8000/punchout/response/')\n    punchout_user = request.session.get('punchout_user', 'test@localhost')\n    logger.info(f\"Checkout access kiya gaya, method: {request.method}, session_key: {session_key}, is_punchout: {is_punchout}, \"\n                f\"punchout_return_url: {punchout_return_url}, punchout_user: {punchout_user}\")",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "thankyou",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def thankyou(request):\n    logger.info(f\"Thank You page access kiya gaya session_key: {request.session.session_key} ke liye\")\n    return render(request, 'cart/thankyou.html')\ndef proceed_to_thankyou(request):\n    if not request.session.session_key:\n        logger.info(\"No session key, naya session banaya ja raha hai\")\n        request.session.create()\n    session_key = request.session.session_key\n    logger.info(f\"Proceed to Thank You access kiya gaya, method: {request.method}, session_key: {session_key}\")\n    if request.method == 'POST':",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "proceed_to_thankyou",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def proceed_to_thankyou(request):\n    if not request.session.session_key:\n        logger.info(\"No session key, naya session banaya ja raha hai\")\n        request.session.create()\n    session_key = request.session.session_key\n    logger.info(f\"Proceed to Thank You access kiya gaya, method: {request.method}, session_key: {session_key}\")\n    if request.method == 'POST':\n        cart_items = CartItem.objects.filter(session_key=session_key)\n        logger.info(f\"Cart clear kiya ja raha hai session_key: {session_key} ke liye, items: {cart_items.count()}\")\n        cart_items.delete()",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef add_to_cart(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_item, created = CartItem.objects.get_or_create(\n        session_key=session_key,\n        product=product,\n        defaults={'quantity': 1}",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "ecommerce.catalog.apps",
        "description": "ecommerce.catalog.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "ecommerce.catalog.apps",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "def categories(request):\n    main_categories = Product.objects.values('main_category').distinct().exclude(main_category='')\n    category_dict = {}\n    for main_cat in main_categories:\n        main_category_name = main_cat['main_category']\n        subcategories = Product.objects.filter(main_category=main_category_name).values('sub_categories').distinct().exclude(sub_categories__in=['', None])\n        category_dict[main_category_name] = {\n            'subcategories': [{'name': sub['sub_categories']} for sub in subcategories]\n        }\n    return {'categories': category_dict}",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "cart_item_count",
        "kind": 2,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "def cart_item_count(request):\n    # Ensure session_key exists\n    if not request.session.session_key:\n        request.session.create()\n    # Calculate total quantity of items in the cart\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key)\n    total_quantity = sum(item.quantity for item in cart_items)\n    return {\n        'cart_item_count': total_quantity\n    }",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "ecommerce.catalog.models",
        "description": "ecommerce.catalog.models",
        "peekOfCode": "class Product(models.Model):\n    item_id = models.AutoField(primary_key=True)\n    main_category = models.CharField(max_length=100)\n    sub_categories = models.CharField(max_length=100, blank=True, null=True)\n    item_code = models.CharField(max_length=50, unique=True)\n    product_title = models.CharField(max_length=255)\n    product_description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    image_url = models.CharField(max_length=500, blank=True, null=True)\n    def __str__(self):",
        "detail": "ecommerce.catalog.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.catalog.urls",
        "description": "ecommerce.catalog.urls",
        "peekOfCode": "app_name = 'catalog'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "ecommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.catalog.urls",
        "description": "ecommerce.catalog.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "ecommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def get_s3_presigned_url(bucket_name, object_key, expiration=3600):\n    try:\n        object_key = object_key.lstrip('/')\n        s3_client = boto3.client(\n            's3',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )\n        url = s3_client.generate_presigned_url(",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def home(request):\n    products = Product.objects.all()[:12]\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/home.html', {'products': products})\ndef product_list(request):\n    products = Product.objects.all()\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key) if request.session.session_key else []\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "product_list",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def product_list(request):\n    products = Product.objects.all()\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key) if request.session.session_key else []\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/product_list.html', {\n        'products': products,\n        'cart_item_count': sum(item.quantity for item in cart_items)\n    })\ndef product_detail(request, item_id):",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def product_detail(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/product_detail.html', {'product': product})\ndef products_by_category(request, main_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name)\n        for product in products:\n            product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n        return render(request, 'catalog/products_by_category.html', {",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_category",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def products_by_category(request, main_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name)\n        for product in products:\n            product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n        return render(request, 'catalog/products_by_category.html', {\n            'main_category': main_category_name,\n            'products': products\n        })\n    except ObjectDoesNotExist:",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_subcategory",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def products_by_subcategory(request, main_category_name, sub_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name, sub_categories=sub_category_name)\n        return render(request, 'catalog/products_by_subcategory.html', {\n            'main_category': main_category_name,\n            'sub_category': sub_category_name,\n            'products': products\n        })\n    except ObjectDoesNotExist:\n        return render(request, 'catalog/products_by_subcategory.html', {",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def search_products(request):\n    query = request.GET.get('query', '')\n    products = Product.objects.filter(\n        Q(product_title__icontains=query) | Q(product_description__icontains=query)\n    )[:12]\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/home.html', {'products': products, 'query': query})",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_s3_presigned_url(bucket_name, object_key, expiration=3600):\n    try:\n        object_key = object_key.lstrip('/')\n        s3_client = boto3.client(\n            's3',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.asgi",
        "description": "ecommerce.ecommerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ecommerce.ecommerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SECRET_KEY = 'your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',\n    'accounts.apps.AccountsConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',\n    'accounts.apps.AccountsConfig',\n    'cart.apps.CartConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'ecommerce.urls'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'ecommerce.urls'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'ecommerce.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'ecom_prod_catalog',\n        'USER': 'vikas',\n        'PASSWORD': 'kalika1667',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'ecom_prod_catalog',\n        'USER': 'vikas',\n        'PASSWORD': 'kalika1667',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.CustomUser'\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"  # Added to define where collected static files will go\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.CustomUser'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'  # Set to use Bootstrap 4 templates\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_ACCESS_KEY_ID = 'AKIARQYYYCJW3DU4CXMU'\nAWS_SECRET_ACCESS_KEY = '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'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = 'wq0v+T7PhY2OwEn5D3JeRjS1TfCg8rc0MIyhOsnV'\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_REGION",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_BUCKET_NAME",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.urls",
        "description": "ecommerce.ecommerce.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('catalog.urls')),\n    path('cart/', include('cart.urls')),\n    path('accounts/', include('accounts.urls')),\n    path('punchout/', include('punchout.urls')),\n]",
        "detail": "ecommerce.ecommerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.wsgi",
        "description": "ecommerce.ecommerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerce.ecommerce.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ecommerce.punchout.migrations.0001_initial",
        "description": "ecommerce.punchout.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PunchOutSession',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('session_key', models.CharField(max_length=40, unique=True)),",
        "detail": "ecommerce.punchout.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PunchoutConfig",
        "kind": 6,
        "importPath": "ecommerce.punchout.apps",
        "description": "ecommerce.punchout.apps",
        "peekOfCode": "class PunchoutConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'punchout'",
        "detail": "ecommerce.punchout.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.punchout.urls",
        "description": "ecommerce.punchout.urls",
        "peekOfCode": "app_name = 'punchout' # App ka naam Punchout rakhein\nurlpatterns = [\n    path('order/', views.generate_punchout_order_cxml, name='generate_punchout_order_cxml'),\n    path('debug/', views.show_punchout_debug, name='show_punchout_debug'),\n    # Agar aap Punchout setup request ko bhi handle karna chahte hain, to isko uncomment karein\n    # path('setup/', views.punchout_setup_request, name='punchout_setup_request'),\n    # Note: Punchout return URL ko bhi yahan define karna padega agar aap use handle kar rahe hain.\n    # path('punchout-return/', views.handle_punchout_return, name='punchout_return'),\n]",
        "detail": "ecommerce.punchout.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.punchout.urls",
        "description": "ecommerce.punchout.urls",
        "peekOfCode": "urlpatterns = [\n    path('order/', views.generate_punchout_order_cxml, name='generate_punchout_order_cxml'),\n    path('debug/', views.show_punchout_debug, name='show_punchout_debug'),\n    # Agar aap Punchout setup request ko bhi handle karna chahte hain, to isko uncomment karein\n    # path('setup/', views.punchout_setup_request, name='punchout_setup_request'),\n    # Note: Punchout return URL ko bhi yahan define karna padega agar aap use handle kar rahe hain.\n    # path('punchout-return/', views.handle_punchout_return, name='punchout_return'),\n]",
        "detail": "ecommerce.punchout.urls",
        "documentation": {}
    },
    {
        "label": "generate_punchout_order_cxml",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def generate_punchout_order_cxml(request):\n    \"\"\"\n    Punchout order CXML generate karne ke liye view.\n    Production mein, Punchout flow supplier ke end par shuru hota hai.\n    Yahan hum cart ke items ka use karke CXML banayenge.\n    \"\"\"\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_items = CartItem.objects.filter(session_key=session_key)",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "show_punchout_debug",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def show_punchout_debug(request):\n    \"\"\"\n    Punchout debug information display karne ke liye view\n    \"\"\"\n    cxml_data = request.session.get('punchout_cxml_data', 'Koi CXML data nahi mila.')\n    request_url = request.session.get('punchout_request_url', 'Koi request URL nahi mila.')\n    response_url = request.session.get('punchout_response_url', 'Koi response URL nahi mila.')\n    # Ek baar dikhane ke baad session se data hata den\n    if 'punchout_cxml_data' in request.session:\n        del request.session['punchout_cxml_data']",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_punchout_order_cxml(request):\n    \"\"\"\n    Punchout order CXML generate karne ke liye view.\n    Production mein, Punchout flow supplier ke end par shuru hota hai.\n    Yahan hum cart ke items ka use karke CXML banayenge.\n    \"\"\"\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ecommerce.manage",
        "description": "ecommerce.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "ecommerce.manage",
        "documentation": {}
    }
]