Index: Kalika_projects-main/Kalika E-commerce/db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import psycopg2\r\n\r\n# Database connection parameters\r\ndb_host = '15.206.157.168'\r\ndb_name = 'ecom_prod_catalog'\r\ndb_user = 'vikas'\r\ndb_password = 'kalika1667'\r\n\r\n\r\ndef insert_user_data(username, email):\r\n    connection = None\r\n    cursor = None\r\n    try:\r\n        # Establishing the connection\r\n        connection = psycopg2.connect(\r\n            host=db_host,\r\n            database=db_name,\r\n            user=db_user,\r\n            password=db_password,\r\n            port='5432'\r\n        )\r\n        cursor = connection.cursor()\r\n        table=\"users2\"\r\n        # Insert new user data into users4 table\r\n        cursor.execute(f\"INSERT INTO {table} (username, email) VALUES (%s, %s);\", (username, email))\r\n        connection.commit()\r\n        print(f\"User data inserted: Username='{username}', Email='{email}'\")\r\n\r\n    except Exception as error:\r\n        print(f\"Error inserting data: {error}\")\r\n    finally:\r\n        if cursor:\r\n            cursor.close()\r\n        if connection:\r\n            connection.close()\r\n\r\n\r\n\r\n\r\n\r\ndef create_orders_table():\r\n    try:\r\n        # Connect to your PostgreSQL database\r\n        connection = psycopg2.connect(\r\n            host=db_host,\r\n            database=db_name,\r\n            user=db_user,\r\n            password=db_password,\r\n            port='5432'\r\n        )\r\n        cursor = connection.cursor()\r\n\r\n        # Create table query\r\n        create_table_query = ''' CREATE TABLE orders (\r\n                                order_id SERIAL PRIMARY KEY,                  -- Unique order ID\r\n                                customer_id INT NOT NULL,                     -- Reference to the customer who placed the order\r\n                                product_id INT NOT NULL,                      -- Reference to the product being ordered\r\n                                quantity INT NOT NULL CHECK (quantity > 0),   -- Quantity of the product\r\n                                price DECIMAL(10, 2) NOT NULL,                -- Price of the product at the time of order\r\n                                order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Date and time the order was placed\r\n                                status VARCHAR(50) DEFAULT 'Pending',         -- Order status (e.g., 'Pending', 'Shipped', 'Delivered')\r\n                                shipping_address TEXT,                        -- Shipping address for the order\r\n                                payment_method VARCHAR(50),                   -- Payment method (e.g., 'Credit Card', 'PayPal')\r\n                                payment_status VARCHAR(50) DEFAULT 'Unpaid',  -- Payment status (e.g., 'Paid', 'Unpaid')\r\n                                shipping_date TIMESTAMP,                      -- Date the order was shipped\r\n                                delivery_date TIMESTAMP,                      -- Date the order was delivered\r\n                                CONSTRAINT fk_customer\r\n                                    FOREIGN KEY (customer_id) \r\n                                    REFERENCES customers(customer_id),        -- Foreign key to customers table\r\n                                CONSTRAINT fk_product\r\n                                    FOREIGN KEY (product_id) \r\n                                    REFERENCES products(product_id)           -- Foreign key to products table\r\n                            );\r\n                            '''\r\n\r\n        cursor.execute(create_table_query)\r\n        connection.commit()\r\n        print(\"Table 'orders' created successfully.\")\r\n\r\n    except Exception as error:\r\n        print(f\"Error creating table: {error}\")\r\n    # finally:\r\n    #     cursor.close()\r\n    #     connection.close()\r\n\r\ndef initialize_connection():\r\n    connection = None\r\n    cursor = None\r\n    try:\r\n        # Establishing the connection\r\n        connection = psycopg2.connect(\r\n            host=db_host,\r\n            database=db_name,\r\n            user=db_user,\r\n            password=db_password,\r\n            port='5432'\r\n        )\r\n        cursor = connection.cursor()\r\n\r\n        # Grant permissions on the public schema\r\n        # cursor.execute(\"\\c {db_name}\")\r\n        cursor.execute(f\"GRANT USAGE ON SCHEMA public TO {db_user};\")\r\n        cursor.execute(f\"GRANT CREATE ON SCHEMA public TO {db_user};\")\r\n        cursor.execute(\"GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO vikas;\")\r\n\r\n        connection.commit()\r\n        print(f\"Permissions granted to user '{db_user}' on public schema.\")\r\n\r\n    except Exception as error:\r\n        print(f\"Error creating permissions: {error}\")\r\n    finally:\r\n        if cursor:\r\n            cursor.close()\r\n        if connection:\r\n            connection.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    initialize_connection()\r\n    # insert_users_data('john_doe', 'john@example.com')\r\n    create_orders_table()\r\n
===================================================================
--- Kalika_projects-main/Kalika E-commerce/db.py	(revision a4a119dc49c411b7938afcd783230086b05f3e6a)
+++ Kalika_projects-main/Kalika E-commerce/db.py	(date 1729765806699)
@@ -1,7 +1,7 @@
 import psycopg2
 
 # Database connection parameters
-db_host = '15.206.157.168'
+db_host = '3.108.190.220'
 db_name = 'ecom_prod_catalog'
 db_user = 'vikas'
 db_password = 'kalika1667'
@@ -20,7 +20,7 @@
             port='5432'
         )
         cursor = connection.cursor()
-        table="users2"
+        table="users3"
         # Insert new user data into users4 table
         cursor.execute(f"INSERT INTO {table} (username, email) VALUES (%s, %s);", (username, email))
         connection.commit()
@@ -65,10 +65,10 @@
                                 shipping_date TIMESTAMP,                      -- Date the order was shipped
                                 delivery_date TIMESTAMP,                      -- Date the order was delivered
                                 CONSTRAINT fk_customer
-                                    FOREIGN KEY (customer_id) 
+                                    FOREIGN KEY (customer_id)
                                     REFERENCES customers(customer_id),        -- Foreign key to customers table
                                 CONSTRAINT fk_product
-                                    FOREIGN KEY (product_id) 
+                                    FOREIGN KEY (product_id)
                                     REFERENCES products(product_id)           -- Foreign key to products table
                             );
                             '''
@@ -98,7 +98,8 @@
         cursor = connection.cursor()
 
         # Grant permissions on the public schema
-        # cursor.execute("\c {db_name}")
+        cursor.execute("\c ecom_prod_catalog")
+
         cursor.execute(f"GRANT USAGE ON SCHEMA public TO {db_user};")
         cursor.execute(f"GRANT CREATE ON SCHEMA public TO {db_user};")
         cursor.execute("GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO vikas;")
@@ -117,5 +118,5 @@
 
 if __name__ == '__main__':
     initialize_connection()
-    # insert_users_data('john_doe', 'john@example.com')
+    insert_user_data('john_doe', 'john@example.com')
     create_orders_table()
