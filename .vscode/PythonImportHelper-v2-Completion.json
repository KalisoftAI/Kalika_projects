[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "KalikaEcommerce.authentication.apps",
        "description": "KalikaEcommerce.authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'",
        "detail": "KalikaEcommerce.authentication.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "KalikaEcommerce.authentication.urls",
        "description": "KalikaEcommerce.authentication.urls",
        "peekOfCode": "app_name = 'auth'\nurlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "KalikaEcommerce.authentication.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KalikaEcommerce.authentication.urls",
        "description": "KalikaEcommerce.authentication.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "KalikaEcommerce.authentication.urls",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "KalikaEcommerce.authentication.views",
        "description": "KalikaEcommerce.authentication.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('catalog:home')\n        else:\n            messages.error(request, 'Invalid username or password.')",
        "detail": "KalikaEcommerce.authentication.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "KalikaEcommerce.authentication.views",
        "description": "KalikaEcommerce.authentication.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('auth:login')",
        "detail": "KalikaEcommerce.authentication.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KalikaEcommerce.cart.migrations.0001_initial",
        "description": "KalikaEcommerce.cart.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('catalog', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CartItem',\n            fields=[",
        "detail": "KalikaEcommerce.cart.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CartConfig",
        "kind": 6,
        "importPath": "KalikaEcommerce.cart.apps",
        "description": "KalikaEcommerce.cart.apps",
        "peekOfCode": "class CartConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cart'",
        "detail": "KalikaEcommerce.cart.apps",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "KalikaEcommerce.cart.models",
        "description": "KalikaEcommerce.cart.models",
        "peekOfCode": "class CartItem(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)\n    session_key = models.CharField(max_length=40, null=True, blank=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.quantity} x {self.product.product_title}\"\n    def subtotal(self):\n        return self.quantity * self.product.price",
        "detail": "KalikaEcommerce.cart.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "KalikaEcommerce.cart.urls",
        "description": "KalikaEcommerce.cart.urls",
        "peekOfCode": "app_name = 'cart'\nurlpatterns = [\n    path('', views.cart, name='cart'),\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('count/', views.cart_count, name='cart_count'),\n]",
        "detail": "KalikaEcommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KalikaEcommerce.cart.urls",
        "description": "KalikaEcommerce.cart.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.cart, name='cart'),\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('count/', views.cart_count, name='cart_count'),\n]",
        "detail": "KalikaEcommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "get_cart_items",
        "kind": 2,
        "importPath": "KalikaEcommerce.cart.views",
        "description": "KalikaEcommerce.cart.views",
        "peekOfCode": "def get_cart_items(request):\n    if request.user.is_authenticated:\n        return CartItem.objects.filter(user=request.user)\n    else:\n        session_key = request.session.session_key\n        if not session_key:\n            request.session.create()\n            session_key = request.session.session_key\n        return CartItem.objects.filter(session_key=session_key)\ndef cart(request):",
        "detail": "KalikaEcommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 2,
        "importPath": "KalikaEcommerce.cart.views",
        "description": "KalikaEcommerce.cart.views",
        "peekOfCode": "def cart(request):\n    cart_items = get_cart_items(request)\n    total = sum(item.subtotal() for item in cart_items)\n    return render(request, 'cart/cart.html', {'cart_items': cart_items, 'total': total})\ndef add_to_cart(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    if request.user.is_authenticated:\n        cart_item, created = CartItem.objects.get_or_create(\n            user=request.user,\n            product=product,",
        "detail": "KalikaEcommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "KalikaEcommerce.cart.views",
        "description": "KalikaEcommerce.cart.views",
        "peekOfCode": "def add_to_cart(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    if request.user.is_authenticated:\n        cart_item, created = CartItem.objects.get_or_create(\n            user=request.user,\n            product=product,\n            defaults={'quantity': 1}\n        )\n    else:\n        session_key = request.session.session_key",
        "detail": "KalikaEcommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "cart_count",
        "kind": 2,
        "importPath": "KalikaEcommerce.cart.views",
        "description": "KalikaEcommerce.cart.views",
        "peekOfCode": "def cart_count(request):\n    cart_items = get_cart_items(request)\n    count = sum(item.quantity for item in cart_items)\n    return JsonResponse({'count': count})",
        "detail": "KalikaEcommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KalikaEcommerce.catalog.migrations.0001_initial",
        "description": "KalikaEcommerce.catalog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('item_id', models.AutoField(primary_key=True, serialize=False)),\n                ('main_category', models.CharField(max_length=100)),",
        "detail": "KalikaEcommerce.catalog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "KalikaEcommerce.catalog.apps",
        "description": "KalikaEcommerce.catalog.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "KalikaEcommerce.catalog.apps",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "KalikaEcommerce.catalog.context_processors",
        "description": "KalikaEcommerce.catalog.context_processors",
        "peekOfCode": "def categories(request):\n    try:\n        logger.debug(\"Fetching categories for context processor\")\n        main_categories = Product.objects.filter(\n            main_category__isnull=False, main_category__gt=''\n        ).values('main_category').distinct()\n        categories_dict = {}\n        for main_cat in main_categories:\n            main_cat_name = main_cat['main_category'].strip()\n            # URL-safe key: replace '/' with '-' and URL-encode",
        "detail": "KalikaEcommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "KalikaEcommerce.catalog.context_processors",
        "description": "KalikaEcommerce.catalog.context_processors",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef categories(request):\n    try:\n        logger.debug(\"Fetching categories for context processor\")\n        main_categories = Product.objects.filter(\n            main_category__isnull=False, main_category__gt=''\n        ).values('main_category').distinct()\n        categories_dict = {}\n        for main_cat in main_categories:\n            main_cat_name = main_cat['main_category'].strip()",
        "detail": "KalikaEcommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "KalikaEcommerce.catalog.models",
        "description": "KalikaEcommerce.catalog.models",
        "peekOfCode": "class Product(models.Model):\n    item_id = models.AutoField(primary_key=True)\n    main_category = models.CharField(max_length=100)\n    sub_categories = models.CharField(max_length=100, blank=True, null=True)\n    item_code = models.CharField(max_length=50, unique=True)\n    product_title = models.CharField(max_length=255)\n    product_description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return self.product_title",
        "detail": "KalikaEcommerce.catalog.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "KalikaEcommerce.catalog.urls",
        "description": "KalikaEcommerce.catalog.urls",
        "peekOfCode": "app_name = 'catalog'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "KalikaEcommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KalikaEcommerce.catalog.urls",
        "description": "KalikaEcommerce.catalog.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "KalikaEcommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "KalikaEcommerce.catalog.views",
        "description": "KalikaEcommerce.catalog.views",
        "peekOfCode": "def home(request):\n    try:\n        products = Product.objects.all()[:12]\n        logger.debug(f\"Home view fetched {products.count()} products\")\n        return render(request, 'catalog/home.html', {'products': products})\n    except Exception as e:\n        logger.error(f\"Error in home view: {e}\")\n        return render(request, 'catalog/home.html', {'products': []})\ndef products_by_category(request, main_category_name):\n    try:",
        "detail": "KalikaEcommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_category",
        "kind": 2,
        "importPath": "KalikaEcommerce.catalog.views",
        "description": "KalikaEcommerce.catalog.views",
        "peekOfCode": "def products_by_category(request, main_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name)\n        logger.debug(f\"Category '{main_category_name}' fetched {products.count()} products\")\n        return render(request, 'catalog/products_by_category.html', {\n            'products': products,\n            'category': main_category_name\n        })\n    except Exception as e:\n        logger.error(f\"Error in products_by_category view: {e}\")",
        "detail": "KalikaEcommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_subcategory",
        "kind": 2,
        "importPath": "KalikaEcommerce.catalog.views",
        "description": "KalikaEcommerce.catalog.views",
        "peekOfCode": "def products_by_subcategory(request, main_category_name, sub_category_name):\n    try:\n        products = Product.objects.filter(\n            main_category=main_category_name,\n            sub_categories=sub_category_name\n        )\n        logger.debug(f\"Subcategory '{sub_category_name}' in '{main_category_name}' fetched {products.count()} products\")\n        return render(request, 'catalog/products_by_subcategory.html', {\n            'products': products,\n            'category': main_category_name,",
        "detail": "KalikaEcommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "KalikaEcommerce.catalog.views",
        "description": "KalikaEcommerce.catalog.views",
        "peekOfCode": "def search_products(request):\n    try:\n        query = request.GET.get('query', '')\n        products = Product.objects.filter(\n            Q(product_title__icontains=query) | Q(product_description__icontains=query)\n        )[:12]\n        logger.debug(f\"Search query '{query}' fetched {products.count()} products\")\n        return render(request, 'catalog/home.html', {'products': products, 'query': query})\n    except Exception as e:\n        logger.error(f\"Error in search_products view: {e}\")",
        "detail": "KalikaEcommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "KalikaEcommerce.catalog.views",
        "description": "KalikaEcommerce.catalog.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef home(request):\n    try:\n        products = Product.objects.all()[:12]\n        logger.debug(f\"Home view fetched {products.count()} products\")\n        return render(request, 'catalog/home.html', {'products': products})\n    except Exception as e:\n        logger.error(f\"Error in home view: {e}\")\n        return render(request, 'catalog/home.html', {'products': []})\ndef products_by_category(request, main_category_name):",
        "detail": "KalikaEcommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "KalikaEcommerce.checkout.migrations.0001_initial",
        "description": "KalikaEcommerce.checkout.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Order',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "KalikaEcommerce.checkout.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CheckoutConfig",
        "kind": 6,
        "importPath": "KalikaEcommerce.checkout.apps",
        "description": "KalikaEcommerce.checkout.apps",
        "peekOfCode": "class CheckoutConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'checkout'",
        "detail": "KalikaEcommerce.checkout.apps",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "KalikaEcommerce.checkout.models",
        "description": "KalikaEcommerce.checkout.models",
        "peekOfCode": "class Order(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    order_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=50, default='Pending')\n    total_amount = models.DecimalField(max_digits=10, decimal_places=2)\n    shipping_address = models.TextField()\n    payment_status = models.CharField(max_length=50, default='Unpaid')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "KalikaEcommerce.checkout.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "KalikaEcommerce.checkout.urls",
        "description": "KalikaEcommerce.checkout.urls",
        "peekOfCode": "app_name = 'checkout'\nurlpatterns = [\n    path('', views.checkout, name='checkout'),\n]",
        "detail": "KalikaEcommerce.checkout.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KalikaEcommerce.checkout.urls",
        "description": "KalikaEcommerce.checkout.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.checkout, name='checkout'),\n]",
        "detail": "KalikaEcommerce.checkout.urls",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "KalikaEcommerce.checkout.views",
        "description": "KalikaEcommerce.checkout.views",
        "peekOfCode": "def checkout(request):\n    if request.method == 'POST':\n        shipping_address = request.POST.get('shipping_address')\n        cart_items = CartItem.objects.filter(user=request.user)\n        total = sum(item.subtotal() for item in cart_items)\n        order = Order.objects.create(\n            user=request.user,\n            total_amount=total,\n            shipping_address=shipping_address,\n            status='Pending',",
        "detail": "KalikaEcommerce.checkout.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.asgi",
        "description": "KalikaEcommerce.KalikaEcommerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "KalikaEcommerce.KalikaEcommerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog',\n    'cart',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog',\n    'cart',\n    'authentication',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'KalikaEcommerce.urls'",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'KalikaEcommerce.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'KalikaEcommerce.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'ecom_prod_catalog',\n        'USER': 'vikas',\n        'PASSWORD': 'kalika1667',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'ecom_prod_catalog',\n        'USER': 'vikas',\n        'PASSWORD': 'kalika1667',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/auth/login'\n# Add to the end of settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.settings",
        "description": "KalikaEcommerce.KalikaEcommerce.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'catalog.context_processors': {",
        "detail": "KalikaEcommerce.KalikaEcommerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.urls",
        "description": "KalikaEcommerce.KalikaEcommerce.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('catalog.urls')),\n    path('cart/', include('cart.urls')),\n    path('auth/', include('authentication.urls')),\n    path('checkout/', include('checkout.urls')),\n]",
        "detail": "KalikaEcommerce.KalikaEcommerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "KalikaEcommerce.KalikaEcommerce.wsgi",
        "description": "KalikaEcommerce.KalikaEcommerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "KalikaEcommerce.KalikaEcommerce.wsgi",
        "documentation": {}
    },
    {
        "label": "create_users_table",
        "kind": 2,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "def create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "create_orders_table",
        "kind": 2,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "def create_orders_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "create_products_table",
        "kind": 2,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "def create_products_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "insert_data_from_csv",
        "kind": 2,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "def insert_data_from_csv(file_path):\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "insert_order",
        "kind": 2,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "def insert_order(user_id, total_amount, status, shipping_address, payment_status):\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    order_date = datetime.now()\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "db_host = \"localhost\" # Change to your database host if not local\ndb_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "db_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "db_user",
        "kind": 5,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "db_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "db_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "db_port",
        "kind": 5,
        "importPath": "KalikaEcommerce.dbtest_copy",
        "description": "KalikaEcommerce.dbtest_copy",
        "peekOfCode": "db_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "KalikaEcommerce.dbtest_copy",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "KalikaEcommerce.manage",
        "description": "KalikaEcommerce.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'KalikaEcommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "KalikaEcommerce.manage",
        "documentation": {}
    },
    {
        "label": "check_products",
        "kind": 2,
        "importPath": "check_products",
        "description": "check_products",
        "peekOfCode": "def check_products():\n    try:\n        connection = psycopg2.connect(\n            host=\"localhost\",\n            database=\"ecom_prod_catalog\",\n            user=\"vikas\",\n            password=\"kalika1667\",\n            port=\"5432\"\n        )\n        cursor = connection.cursor()",
        "detail": "check_products",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "check_products",
        "description": "check_products",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef check_products():\n    try:\n        connection = psycopg2.connect(\n            host=\"localhost\",\n            database=\"ecom_prod_catalog\",\n            user=\"vikas\",\n            password=\"kalika1667\",\n            port=\"5432\"\n        )",
        "detail": "check_products",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.\n    \"\"\"\n    if 'db' not in g:\n        try:\n            g.db = psycopg2.connect(\n                host=db_host,\n                database=db_name,",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "close_db_connection",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def close_db_connection(e=None):\n    \"\"\"Closes the database connection at the end of the request.\"\"\"\n    db = g.pop('db', None)\n    if db is not None:\n        db.close()\n        logger.info(\"Database connection closed for this request.\")\n# --- YOUR EXISTING UTILITY FUNCTIONS (UNCHANGED) ---\n# These will now use a temporary, direct connection for script execution.\ndef get_direct_db_connection():\n    \"\"\"A direct connection for running this file as a script.\"\"\"",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_direct_db_connection",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def get_direct_db_connection():\n    \"\"\"A direct connection for running this file as a script.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host, database=db_name, user=db_user, password=db_password, port=db_port\n        )\n        return connection\n    except Exception as e:\n        print(f\"Direct database connection error: {e}\")\n        return None",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "view_tables_and_data",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def view_tables_and_data():\n    connection = None\n    cursor = None\n    try:\n        connection = get_direct_db_connection()\n        if not connection: return\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';\")\n        tables = cursor.fetchall()\n        print(\"Tables in the database:\")",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "create_punchout_table",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def create_punchout_table():\n    connection = None\n    cursor = None\n    try:\n        connection = get_direct_db_connection()\n        if not connection: return\n        cursor = connection.cursor()\n        create_table_query = \"\"\"\n        CREATE TABLE IF NOT EXISTS punchout_responses (\n            id SERIAL PRIMARY KEY,",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# --- Database connection parameters ---\n# Using os.getenv to be more flexible, but keeping your defaults\ndb_host = os.getenv('DB_HOST', 'localhost')\ndb_name = os.getenv('DB_NAME', 'ecom_prod_catalog')\ndb_user = os.getenv('DB_USER', 'vikas')\ndb_password = os.getenv('DB_PASSWORD', 'kalika1667')\ndb_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db_host = os.getenv('DB_HOST', 'localhost')\ndb_name = os.getenv('DB_NAME', 'ecom_prod_catalog')\ndb_user = os.getenv('DB_USER', 'vikas')\ndb_password = os.getenv('DB_PASSWORD', 'kalika1667')\ndb_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db_name = os.getenv('DB_NAME', 'ecom_prod_catalog')\ndb_user = os.getenv('DB_USER', 'vikas')\ndb_password = os.getenv('DB_PASSWORD', 'kalika1667')\ndb_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.\n    \"\"\"",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db_user",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db_user = os.getenv('DB_USER', 'vikas')\ndb_password = os.getenv('DB_PASSWORD', 'kalika1667')\ndb_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.\n    \"\"\"\n    if 'db' not in g:",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db_password = os.getenv('DB_PASSWORD', 'kalika1667')\ndb_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.\n    \"\"\"\n    if 'db' not in g:\n        try:",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db_port",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db_port = os.getenv('DB_PORT', '5432')\n# --- NEW FLASK-SAFE CONNECTION MANAGEMENT ---\ndef get_db_connection():\n    \"\"\"\n    Establishes a new database connection for the current request or returns an existing one.\n    Uses Flask's 'g' object for efficiency and safety.\n    \"\"\"\n    if 'db' not in g:\n        try:\n            g.db = psycopg2.connect(",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "create_users_table",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "create_orders_table",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def create_orders_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "create_products_table",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def create_products_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "insert_data_from_csv",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def insert_data_from_csv(file_path):\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "insert_order",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def insert_order(user_id, total_amount, status, shipping_address, payment_status):\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    order_date = datetime.now()\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "db_host = \"localhost\" # Change to your database host if not local\ndb_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "db_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "db_user",
        "kind": 5,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "db_user = 'vikas'\ndb_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "db_password = 'kalika1667'\n# db_password = 'kalika1992'\ndb_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "db_port",
        "kind": 5,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "db_port = '5432' # Default PostgreSQL port\ndef create_users_table():\n    connection = None # Initialize to None\n    cursor = None     # Initialize to None\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "dbtest",
        "documentation": {}
    }
]