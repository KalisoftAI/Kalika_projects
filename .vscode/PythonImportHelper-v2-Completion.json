[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "catalog.models",
        "description": "catalog.models",
        "isExtraImport": true,
        "detail": "catalog.models",
        "documentation": {}
    },
    {
        "label": "PunchOutOrder",
        "importPath": "punchout.models",
        "description": "punchout.models",
        "isExtraImport": true,
        "detail": "punchout.models",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "importPath": "catalog.views",
        "description": "catalog.views",
        "isExtraImport": true,
        "detail": "catalog.views",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "importPath": "catalog.views",
        "description": "catalog.views",
        "isExtraImport": true,
        "detail": "catalog.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "cart.models",
        "description": "cart.models",
        "isExtraImport": true,
        "detail": "cart.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Mount",
        "importPath": "starlette.routing",
        "description": "starlette.routing",
        "isExtraImport": true,
        "detail": "starlette.routing",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "fastapi_app.app",
        "description": "fastapi_app.app",
        "isExtraImport": true,
        "detail": "fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "SessionMiddleware",
        "importPath": "starlette.middleware.sessions",
        "description": "starlette.middleware.sessions",
        "isExtraImport": true,
        "detail": "starlette.middleware.sessions",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "starlette.staticfiles",
        "description": "starlette.staticfiles",
        "isExtraImport": true,
        "detail": "starlette.staticfiles",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_user_count",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_product_count",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_total_sales",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_pending_orders_count",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_recent_orders",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_product_category_counts",
        "importPath": "fastapi_app.db",
        "description": "fastapi_app.db",
        "isExtraImport": true,
        "detail": "fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "isExtraImport": true,
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "ecommerce.accounts.apps",
        "description": "ecommerce.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "ecommerce.accounts.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "ecommerce.accounts.forms",
        "description": "ecommerce.accounts.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        # Make sure your custom user model is referenced here\n        model = CustomUser\n        # Ensure all fields you want on the registration form are listed\n        fields = ('username', 'email') # Add or remove fields as needed\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Define the Tailwind CSS classes you want to apply to every field\n        tailwind_classes = \"w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"",
        "detail": "ecommerce.accounts.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "ecommerce.accounts.models",
        "description": "ecommerce.accounts.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    first_name = models.CharField(max_length=30, blank=True)  # The problematic field\n    last_name = models.CharField(max_length=30, blank=True)\n    groups = models.ManyToManyField(\n        'auth.Group',\n        related_name='customuser_set',\n        blank=True,\n        help_text='The groups this user belongs to.',\n        verbose_name='groups',\n    )",
        "detail": "ecommerce.accounts.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.accounts.urls",
        "description": "ecommerce.accounts.urls",
        "peekOfCode": "app_name = 'accounts'\nurlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('register/', views.register_view, name='register'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "ecommerce.accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.accounts.urls",
        "description": "ecommerce.accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.login_view, name='login'),\n    path('register/', views.register_view, name='register'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "ecommerce.accounts.urls",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('catalog:home')\n        else:\n            messages.error(request, 'Invalid username or password.')",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def register_view(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)  # Use CustomUserCreationForm\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Registration successful. Please log in.')\n            return redirect('accounts:login')  # Redirect to login page\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('catalog:home')",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.accounts.views",
        "description": "ecommerce.accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('catalog:home')\n        else:",
        "detail": "ecommerce.accounts.views",
        "documentation": {}
    },
    {
        "label": "CartConfig",
        "kind": 6,
        "importPath": "ecommerce.cart.apps",
        "description": "ecommerce.cart.apps",
        "peekOfCode": "class CartConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cart'",
        "detail": "ecommerce.cart.apps",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "ecommerce.cart.models",
        "description": "ecommerce.cart.models",
        "peekOfCode": "class CartItem(models.Model):\n    session_key = models.CharField(max_length=40)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.quantity} x {self.product.product_title}\"\n    class Meta:\n        db_table = 'cart_cartitem'",
        "detail": "ecommerce.cart.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.cart.urls",
        "description": "ecommerce.cart.urls",
        "peekOfCode": "app_name = 'cart'\nurlpatterns = [\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('', views.view_cart, name='view_cart'),\n    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),\n    path('checkout/', views.checkout, name='checkout'),\n    path('view/', views.view_cart, name='view_cart'),\n    path('thankyou/', views.thankyou, name='thankyou'), \n    path('proceed-to-thankyou/', views.proceed_to_thankyou, name='proceed_to_thankyou'),\n    path('update_quantity/', views.update_cart_quantity, name='update_cart_quantity'),",
        "detail": "ecommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.cart.urls",
        "description": "ecommerce.cart.urls",
        "peekOfCode": "urlpatterns = [\n    path('add/<int:item_id>/', views.add_to_cart, name='add_to_cart'),\n    path('', views.view_cart, name='view_cart'),\n    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),\n    path('checkout/', views.checkout, name='checkout'),\n    path('view/', views.view_cart, name='view_cart'),\n    path('thankyou/', views.thankyou, name='thankyou'), \n    path('proceed-to-thankyou/', views.proceed_to_thankyou, name='proceed_to_thankyou'),\n    path('update_quantity/', views.update_cart_quantity, name='update_cart_quantity'),\n]",
        "detail": "ecommerce.cart.urls",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def add_to_cart(request, item_id):\n    \"\"\"Adds a product to the cart. Supports AJAX and redirects.\"\"\"\n    product = get_object_or_404(Product, item_id=item_id)\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_item, created = CartItem.objects.get_or_create(\n        session_key=session_key,\n        product=product,\n        defaults={'quantity': 1}",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "view_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def view_cart(request):\n    \"\"\"Display the cart with S3 image URLs.\"\"\"\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_items = CartItem.objects.filter(session_key=session_key)\n    total = sum(item.quantity * item.product.price for item in cart_items)\n    for item in cart_items:\n        item.subtotal = item.quantity * item.product.price\n        item.product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, item.product.image_url) if item.product.image_url else None",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def remove_from_cart(request, item_id):\n    \"\"\"Remove an item from the cart.\"\"\"\n    if request.method == 'POST':\n        try:\n            cart_item = CartItem.objects.get(id=item_id, session_key=request.session.session_key)\n            cart_item.delete()\n            messages.success(request, 'Item removed from cart.')\n        except CartItem.DoesNotExist:\n            logger.warning(f\"CartItem id {item_id} not found for session {request.session.session_key}\")\n            messages.error(request, 'Item not found in your cart.')",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "update_cart_quantity",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def update_cart_quantity(request):\n    \"\"\"Update cart item quantity via AJAX.\"\"\"\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            item_id = data.get('item_id')\n            quantity = data.get('quantity')\n            cart_item = CartItem.objects.get(id=item_id, session_key=request.session.session_key)\n            if quantity > 0:\n                cart_item.quantity = quantity",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def checkout(request):\n    \"\"\"Handle checkout, processing both PunchOut and non-PunchOut orders.\"\"\"\n    if not request.session.session_key:\n        logger.info(\"No session key, creating a new one.\")\n        request.session.create()\n    session_key = request.session.session_key\n    is_punchout = request.session.get('is_punchout', False)\n    punchout_return_url = request.session.get('punchout_return_url', settings.PUNCHOUT_RETURN_URL)\n    punchout_user = request.session.get('punchout_user', request.user.email if request.user.is_authenticated else 'test@localhost')\n    punchout_buyer_cookie = request.session.get('punchout_buyer_cookie', '123456')",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "thankyou",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def thankyou(request):\n    \"\"\"Render thank you page for non-PunchOut checkouts.\"\"\"\n    logger.info(f\"Thank You page accessed for session_key: {request.session.session_key}\")\n    return render(request, 'cart/thankyou.html')\ndef proceed_to_thankyou(request):\n    \"\"\"Handle non-PunchOut checkout completion.\"\"\"\n    if not request.session.session_key:\n        logger.info(\"No session key, creating a new one.\")\n        request.session.create()\n    session_key = request.session.session_key",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "proceed_to_thankyou",
        "kind": 2,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "def proceed_to_thankyou(request):\n    \"\"\"Handle non-PunchOut checkout completion.\"\"\"\n    if not request.session.session_key:\n        logger.info(\"No session key, creating a new one.\")\n        request.session.create()\n    session_key = request.session.session_key\n    if request.session.get('is_punchout', False):\n        logger.info(f\"PunchOut session detected, redirecting to PunchOut return flow.\")\n        return redirect('punchout:return_cart_to_ariba')\n    logger.info(f\"Proceed to Thank You accessed with method: {request.method}, session_key: {session_key}\")",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.cart.views",
        "description": "ecommerce.cart.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef add_to_cart(request, item_id):\n    \"\"\"Adds a product to the cart. Supports AJAX and redirects.\"\"\"\n    product = get_object_or_404(Product, item_id=item_id)\n    if not request.session.session_key:\n        request.session.create()\n    session_key = request.session.session_key\n    cart_item, created = CartItem.objects.get_or_create(\n        session_key=session_key,\n        product=product,",
        "detail": "ecommerce.cart.views",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "ecommerce.catalog.templatetags.catalog_tags",
        "description": "ecommerce.catalog.templatetags.catalog_tags",
        "peekOfCode": "def get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "ecommerce.catalog.templatetags.catalog_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "ecommerce.catalog.templatetags.catalog_tags",
        "description": "ecommerce.catalog.templatetags.catalog_tags",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)",
        "detail": "ecommerce.catalog.templatetags.catalog_tags",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "ecommerce.catalog.apps",
        "description": "ecommerce.catalog.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "ecommerce.catalog.apps",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "def categories(request):\n    category_structure = {main_cat: {'subcategories': {}, 'product_count': 0} for main_cat in DEFINED_MAIN_CATEGORIES}\n    # Fetch all relevant product fields in a single query\n    products_for_categories = Product.objects.filter(\n        main_category__in=DEFINED_MAIN_CATEGORIES\n    ).exclude(\n        Q(sub_categories__isnull=True) | Q(sub_categories__exact='') | Q(sub_categories__in=SUB_CATEGORY_BLOCKLIST)\n    ).values('main_category', 'sub_categories').distinct().order_by('main_category', 'sub_categories')\n    # Count products per main category and subcategory\n    for main_cat in DEFINED_MAIN_CATEGORIES:",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "cart_item_count",
        "kind": 2,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "def cart_item_count(request):\n    if not request.session.session_key:\n        request.session.create()\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key)\n    total_quantity = sum(item.quantity for item in cart_items)\n    return {'cart_item_count': total_quantity}",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "DEFINED_MAIN_CATEGORIES",
        "kind": 5,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "DEFINED_MAIN_CATEGORIES = [\n    \"Safety\", \"Janitorial\", \"Packaging\", \"Facility Maintenance\",\n    \"Chemicals & Lubricants\", \"Abrasives\", \"Adhesives, Sealants & Tape\",\n    \"Hand & Power Tools\", \"Pneumatics\", \"Cutting Tools\", \"Welding Tools\",\n    \"Measuring Instruments & Tools\", \"Mechanical Power Transmission\",\n    \"ACCESSORIES\", \"STATIONERY\", \"Appliances And Utilities\", \"WAVE PROJECT\",\n    \"Plastic Bags\", \"PTFE HOSE CTCI\",\n]\nSUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]\ndef categories(request):",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "SUB_CATEGORY_BLOCKLIST",
        "kind": 5,
        "importPath": "ecommerce.catalog.context_processors",
        "description": "ecommerce.catalog.context_processors",
        "peekOfCode": "SUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]\ndef categories(request):\n    category_structure = {main_cat: {'subcategories': {}, 'product_count': 0} for main_cat in DEFINED_MAIN_CATEGORIES}\n    # Fetch all relevant product fields in a single query\n    products_for_categories = Product.objects.filter(\n        main_category__in=DEFINED_MAIN_CATEGORIES\n    ).exclude(\n        Q(sub_categories__isnull=True) | Q(sub_categories__exact='') | Q(sub_categories__in=SUB_CATEGORY_BLOCKLIST)\n    ).values('main_category', 'sub_categories').distinct().order_by('main_category', 'sub_categories')\n    # Count products per main category and subcategory",
        "detail": "ecommerce.catalog.context_processors",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "ecommerce.catalog.models",
        "description": "ecommerce.catalog.models",
        "peekOfCode": "class Product(models.Model):\n    item_id = models.AutoField(primary_key=True)\n    main_category = models.CharField(max_length=100)\n    sub_categories = models.CharField(max_length=100, blank=True, null=True)\n    item_code = models.CharField(max_length=50, unique=True)\n    product_title = models.CharField(max_length=255)\n    product_description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    large_image = models.CharField(max_length=500, blank=True, null=True)\n    def __str__(self):",
        "detail": "ecommerce.catalog.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.catalog.urls",
        "description": "ecommerce.catalog.urls",
        "peekOfCode": "app_name = 'catalog'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    # CORRECTED: Switched back to <path:...> to allow slashes in category names.\n    # The order remains the same: most specific URL comes first.\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('categories/', views.all_categories, name='all_categories'),",
        "detail": "ecommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.catalog.urls",
        "description": "ecommerce.catalog.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    # CORRECTED: Switched back to <path:...> to allow slashes in category names.\n    # The order remains the same: most specific URL comes first.\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('categories/', views.all_categories, name='all_categories'),\n    path('search/', views.search_products, name='search_products'),",
        "detail": "ecommerce.catalog.urls",
        "documentation": {}
    },
    {
        "label": "add_s3_urls_to_products",
        "kind": 2,
        "importPath": "ecommerce.catalog.utils",
        "description": "ecommerce.catalog.utils",
        "peekOfCode": "def add_s3_urls_to_products(products):\n    \"\"\"\n    Add S3 presigned URLs to products for image access.\n    Assumes products have an 'image_url' field from the database.\n    \"\"\"\n    s3_client = boto3.client(\n        's3',\n        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n        region_name=settings.AWS_S3_REGION_NAME",
        "detail": "ecommerce.catalog.utils",
        "documentation": {}
    },
    {
        "label": "build_category_context",
        "kind": 2,
        "importPath": "ecommerce.catalog.utils",
        "description": "ecommerce.catalog.utils",
        "peekOfCode": "def build_category_context():\n    \"\"\"\n    Build category structure for templates.\n    Moved from context_processors.py to avoid redundancy.\n    \"\"\"\n    category_structure = {main_cat: {'subcategories': {}, 'product_count': 0} for main_cat in DEFINED_MAIN_CATEGORIES}\n    products_for_categories = Product.objects.filter(\n        main_category__in=DEFINED_MAIN_CATEGORIES\n    ).exclude(\n        Q(sub_categories__isnull=True) | Q(sub_categories__exact='') | Q(sub_categories__in=SUB_CATEGORY_BLOCKLIST)",
        "detail": "ecommerce.catalog.utils",
        "documentation": {}
    },
    {
        "label": "DEFINED_MAIN_CATEGORIES",
        "kind": 5,
        "importPath": "ecommerce.catalog.utils",
        "description": "ecommerce.catalog.utils",
        "peekOfCode": "DEFINED_MAIN_CATEGORIES = [\n    \"safety\", \"janitorial\", \"packaging\", \"facility maintenance\",\n    \"chemicals & lubricants\", \"abrasives\", \"adhesives, sealants & tape\",\n    \"hand & power tools\", \"pneumatics\", \"cutting tools\", \"welding tools\",\n    \"measuring instruments & tools\", \"mechanical power transmission\",\n    \"accessories\", \"stationery\", \"appliances and utilities\", \"wave project\",\n    \"plastic bags\", \"ptfe hose ctci\",\n]\nSUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]\ndef add_s3_urls_to_products(products):",
        "detail": "ecommerce.catalog.utils",
        "documentation": {}
    },
    {
        "label": "SUB_CATEGORY_BLOCKLIST",
        "kind": 5,
        "importPath": "ecommerce.catalog.utils",
        "description": "ecommerce.catalog.utils",
        "peekOfCode": "SUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]\ndef add_s3_urls_to_products(products):\n    \"\"\"\n    Add S3 presigned URLs to products for image access.\n    Assumes products have an 'image_url' field from the database.\n    \"\"\"\n    s3_client = boto3.client(\n        's3',\n        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,",
        "detail": "ecommerce.catalog.utils",
        "documentation": {}
    },
    {
        "label": "build_category_context",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def build_category_context():\n    \"\"\"\n    Builds the nested dictionary for the header menu, including products for each subcategory.\n    Uses efficient database queries to fetch main categories, subcategories, and up to 5 products per subcategory.\n    \"\"\"\n    category_structure = {main_cat: {'subcategories': {}, 'product_count': 0} for main_cat in DEFINED_MAIN_CATEGORIES}\n    # Count products per main category and build subcategory structure with products\n    for main_cat in DEFINED_MAIN_CATEGORIES:\n        category_structure[main_cat]['product_count'] = Product.objects.filter(main_category=main_cat).count()\n        # CORRECTED: Changed lookups to use double underscores (e.g., __isnull)",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def get_s3_presigned_url(bucket_name, object_key, expiration=3600):\n    try:\n        object_key = object_key.lstrip('/')\n        s3_client = boto3.client(\n            's3',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )\n        return s3_client.generate_presigned_url(",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "add_s3_urls_to_products",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def add_s3_urls_to_products(products):\n    for product in products:\n        if product.large_image:\n            image_key = product.large_image.lstrip('/')\n            product.s3_image_url = get_s3_presigned_url(\n                settings.AWS_S3_BUCKET_NAME,\n                image_key\n            )\n        else:\n            product.s3_image_url = None",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def home(request):\n    # Fetch products for various categories dynamically\n    products_by_category = {}\n    current_minute = int(time.time() // 60)\n    for category in DEFINED_MAIN_CATEGORIES:\n        # MODIFICATION: Changed to a case-insensitive \"contains\" filter for more reliability.\n        all_products = Product.objects.filter(\n            main_category__icontains=category.split(\" \")[0]\n        ).exclude(large_image__icontains='noimage.jpg')\n        total = all_products.count()",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "product_list",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def product_list(request):\n    products = Product.objects.all()\n    products_with_urls = add_s3_urls_to_products(products)\n    context = {\n        'products': products_with_urls,\n        'categories': build_category_context()\n    }\n    return render(request, 'catalog/product_list.html', context)\ndef product_detail(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def product_detail(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    if product.large_image:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.large_image.lstrip('/'))\n    else:\n        product.s3_image_url = None\n    context = {\n        'product': product,\n        'categories': build_category_context()\n    }",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_category",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def products_by_category(request, main_category_name):\n    # Get all products for the main category\n    products = Product.objects.filter(main_category=main_category_name)\n    products_with_urls = add_s3_urls_to_products(products)\n    # CORRECTED: Use .annotate() to dynamically count products for each subcategory\n    subcategories_qs = Product.objects.filter(\n        main_category=main_category_name\n    ).exclude(\n        Q(sub_categories__isnull=True) | Q(sub_categories__exact='')\n    ).values('sub_categories').annotate(",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "products_by_subcategory",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def products_by_subcategory(request, main_category_name, sub_category_name):\n    # Decode URL-encoded subcategory name\n    decoded_sub_category = unquote(sub_category_name)\n    logger.debug(f\"Fetching products for main_category: {main_category_name}, raw sub_categories: {sub_category_name}, decoded sub_categories: {decoded_sub_category}\")\n    # Filter products with case-insensitive exact match, excluding blocklisted subcategories\n    products = Product.objects.filter(\n        main_category__iexact=main_category_name,\n        sub_categories__iexact=decoded_sub_category\n    ).exclude(sub_categories__in=SUB_CATEGORY_BLOCKLIST)\n    if not products.exists():",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "all_categories",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def all_categories(request):\n    categories_data = {}\n    main_categories_queryset = (\n        Product.objects\n        .values_list('main_category', flat=True)\n        .distinct()\n        .exclude(main_category__isnull=True)\n        .exclude(main_category__exact='')\n        .order_by('main_category')\n    )",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "def search_products(request):\n    query = request.GET.get('query', '').strip()\n    products = []\n    if query:  # Only perform query if non-empty\n        products = Product.objects.filter(\n            Q(product_title__icontains=query) |\n            Q(main_category__icontains=query) |\n            Q(sub_categories__icontains=query)\n        ).exclude(\n            Q(sub_categories__in=SUB_CATEGORY_BLOCKLIST) |",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# This is the master list of main categories that will appear in your menu.\nDEFINED_MAIN_CATEGORIES = [\n    \"Safety\", \"Janitorial\", \"Packaging\", \"Facility Maintenance\",\n    \"Chemicals & Lubricants\", \"Abrasives\", \"Adhesives, Sealants & Tape\",\n    \"Hand & Power Tools\", \"Pneumatics\", \"Cutting Tools\", \"Welding Tools\",\n    \"Measuring Instruments & Tools\", \"Mechanical Power Transmission\",\n    \"ACCESSORIES\", \"STATIONERY\", \"Appliances And Utilities\", \"WAVE PROJECT\",\n    \"Plastic Bags\", \"PTFE HOSE CTCI\",\n]",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "DEFINED_MAIN_CATEGORIES",
        "kind": 5,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "DEFINED_MAIN_CATEGORIES = [\n    \"Safety\", \"Janitorial\", \"Packaging\", \"Facility Maintenance\",\n    \"Chemicals & Lubricants\", \"Abrasives\", \"Adhesives, Sealants & Tape\",\n    \"Hand & Power Tools\", \"Pneumatics\", \"Cutting Tools\", \"Welding Tools\",\n    \"Measuring Instruments & Tools\", \"Mechanical Power Transmission\",\n    \"ACCESSORIES\", \"STATIONERY\", \"Appliances And Utilities\", \"WAVE PROJECT\",\n    \"Plastic Bags\", \"PTFE HOSE CTCI\",\n]\n# This is a blocklist to filter out unwanted sub-category names.\nSUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "SUB_CATEGORY_BLOCKLIST",
        "kind": 5,
        "importPath": "ecommerce.catalog.views",
        "description": "ecommerce.catalog.views",
        "peekOfCode": "SUB_CATEGORY_BLOCKLIST = [\"home\", \"system\", \"menu1\", \"shop\", \"\"]\ndef build_category_context():\n    \"\"\"\n    Builds the nested dictionary for the header menu, including products for each subcategory.\n    Uses efficient database queries to fetch main categories, subcategories, and up to 5 products per subcategory.\n    \"\"\"\n    category_structure = {main_cat: {'subcategories': {}, 'product_count': 0} for main_cat in DEFINED_MAIN_CATEGORIES}\n    # Count products per main category and build subcategory structure with products\n    for main_cat in DEFINED_MAIN_CATEGORIES:\n        category_structure[main_cat]['product_count'] = Product.objects.filter(main_category=main_cat).count()",
        "detail": "ecommerce.catalog.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "ecommerce.catalog1.management.commands.import_cif",
        "description": "ecommerce.catalog1.management.commands.import_cif",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Imports products from a CIF file into the Product model'\n    def add_arguments(self, parser):\n        parser.add_argument('cif_file', type=str, help='Path to the CIF file')\n    def handle(self, *args, **options):\n        cif_file = options['cif_file']\n        with open(cif_file, 'r', encoding='utf-8') as file:\n            lines = file.readlines()\n            data_section = False\n            for line in lines:",
        "detail": "ecommerce.catalog1.management.commands.import_cif",
        "documentation": {}
    },
    {
        "label": "CatalogConfig",
        "kind": 6,
        "importPath": "ecommerce.catalog1.apps",
        "description": "ecommerce.catalog1.apps",
        "peekOfCode": "class CatalogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'catalog'",
        "detail": "ecommerce.catalog1.apps",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "ecommerce.catalog1.context_processors",
        "description": "ecommerce.catalog1.context_processors",
        "peekOfCode": "def categories(request):\n    main_categories = Product.objects.values('main_category').distinct().exclude(main_category='')\n    category_dict = {}\n    for main_cat in main_categories:\n        main_category_name = main_cat['main_category']\n        subcategories = Product.objects.filter(main_category=main_category_name).values('sub_categories').distinct().exclude(sub_categories__in=['', None])\n        category_dict[main_category_name] = {\n            'subcategories': [{'name': sub['sub_categories']} for sub in subcategories]\n        }\n    return {'categories': category_dict}",
        "detail": "ecommerce.catalog1.context_processors",
        "documentation": {}
    },
    {
        "label": "cart_item_count",
        "kind": 2,
        "importPath": "ecommerce.catalog1.context_processors",
        "description": "ecommerce.catalog1.context_processors",
        "peekOfCode": "def cart_item_count(request):\n    # Ensure session_key exists\n    if not request.session.session_key:\n        request.session.create()\n    # Calculate total quantity of items in the cart\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key)\n    total_quantity = sum(item.quantity for item in cart_items)\n    return {\n        'cart_item_count': total_quantity\n    }",
        "detail": "ecommerce.catalog1.context_processors",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "ecommerce.catalog1.models",
        "description": "ecommerce.catalog1.models",
        "peekOfCode": "class Product(models.Model):\n    item_id = models.AutoField(primary_key=True)\n    main_category = models.CharField(max_length=100)\n    sub_categories = models.CharField(max_length=100, blank=True, null=True)\n    item_code = models.CharField(max_length=50, unique=True)\n    product_title = models.CharField(max_length=255)\n    product_description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    image_url = models.CharField(max_length=500, blank=True, null=True)\n    def __str__(self):",
        "detail": "ecommerce.catalog1.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.catalog1.urls",
        "description": "ecommerce.catalog1.urls",
        "peekOfCode": "app_name = 'catalog'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "ecommerce.catalog1.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.catalog1.urls",
        "description": "ecommerce.catalog1.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:item_id>/', views.product_detail, name='product_detail'),\n    path('category/<path:main_category_name>/', views.products_by_category, name='products_by_category'),\n    path('category/<path:main_category_name>/<path:sub_category_name>/', views.products_by_subcategory, name='products_by_subcategory'),\n    path('search/', views.search_products, name='search_products'),\n]",
        "detail": "ecommerce.catalog1.urls",
        "documentation": {}
    },
    {
        "label": "get_s3_presigned_url",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def get_s3_presigned_url(bucket_name, object_key, expiration=3600):\n    try:\n        object_key = object_key.lstrip('/')\n        s3_client = boto3.client(\n            's3',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )\n        url = s3_client.generate_presigned_url(",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def home(request):\n    products = Product.objects.all()[:12]\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/home.html', {'products': products})\ndef product_list(request):\n    products = Product.objects.all()\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key) if request.session.session_key else []\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "product_list",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def product_list(request):\n    products = Product.objects.all()\n    cart_items = CartItem.objects.filter(session_key=request.session.session_key) if request.session.session_key else []\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/product_list.html', {\n        'products': products,\n        'cart_item_count': sum(item.quantity for item in cart_items)\n    })\ndef product_detail(request, item_id):",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def product_detail(request, item_id):\n    product = get_object_or_404(Product, item_id=item_id)\n    product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/product_detail.html', {'product': product})\ndef products_by_category(request, main_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name)\n        for product in products:\n            product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n        return render(request, 'catalog/products_by_category.html', {",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "products_by_category",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def products_by_category(request, main_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name)\n        for product in products:\n            product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n        return render(request, 'catalog/products_by_category.html', {\n            'main_category': main_category_name,\n            'products': products\n        })\n    except ObjectDoesNotExist:",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "products_by_subcategory",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def products_by_subcategory(request, main_category_name, sub_category_name):\n    try:\n        products = Product.objects.filter(main_category=main_category_name, sub_categories=sub_category_name)\n        return render(request, 'catalog/products_by_subcategory.html', {\n            'main_category': main_category_name,\n            'sub_category': sub_category_name,\n            'products': products\n        })\n    except ObjectDoesNotExist:\n        return render(request, 'catalog/products_by_subcategory.html', {",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "def search_products(request):\n    query = request.GET.get('query', '')\n    products = Product.objects.filter(\n        Q(product_title__icontains=query) | Q(product_description__icontains=query)\n    )[:12]\n    for product in products:\n        product.s3_image_url = get_s3_presigned_url(settings.AWS_S3_BUCKET_NAME, product.image_url) if product.image_url else None\n    return render(request, 'catalog/home.html', {'products': products, 'query': query})",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.catalog1.views",
        "description": "ecommerce.catalog1.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_s3_presigned_url(bucket_name, object_key, expiration=3600):\n    try:\n        object_key = object_key.lstrip('/')\n        s3_client = boto3.client(\n            's3',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )",
        "detail": "ecommerce.catalog1.views",
        "documentation": {}
    },
    {
        "label": "ChatbotConfig",
        "kind": 6,
        "importPath": "ecommerce.chatbot.apps",
        "description": "ecommerce.chatbot.apps",
        "peekOfCode": "class ChatbotConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"chatbot\"",
        "detail": "ecommerce.chatbot.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.chatbot.urls",
        "description": "ecommerce.chatbot.urls",
        "peekOfCode": "urlpatterns = [\n    path('chat/', views.chat_with_gemini, name='chat_with_gemini'),\n    path('chat/clear/', views.clear_chat_history, name='clear_chat_history'),\n]",
        "detail": "ecommerce.chatbot.urls",
        "documentation": {}
    },
    {
        "label": "chat_with_gemini",
        "kind": 2,
        "importPath": "ecommerce.chatbot.views",
        "description": "ecommerce.chatbot.views",
        "peekOfCode": "def chat_with_gemini(request):\n    \"\"\"\n    Handles chat messages, interacts with the Gemini API, and returns responses.\n    Maintains chat history in the session.\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get the message from the frontend (expecting JSON payload)\n            data = json.loads(request.body)\n            user_message = data.get('message', '').strip()",
        "detail": "ecommerce.chatbot.views",
        "documentation": {}
    },
    {
        "label": "clear_chat_history",
        "kind": 2,
        "importPath": "ecommerce.chatbot.views",
        "description": "ecommerce.chatbot.views",
        "peekOfCode": "def clear_chat_history(request):\n    \"\"\"\n    Clears the chat history from the session.\n    \"\"\"\n    if 'chat_history' in request.session:\n        del request.session['chat_history']\n    return JsonResponse({'message': 'Chat history cleared.'})",
        "detail": "ecommerce.chatbot.views",
        "documentation": {}
    },
    {
        "label": "GEMINI_API_KEY",
        "kind": 5,
        "importPath": "ecommerce.chatbot.views",
        "description": "ecommerce.chatbot.views",
        "peekOfCode": "GEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\nif GEMINI_API_KEY:\n    genai.configure(api_key=GEMINI_API_KEY)\nelse:\n    print(\"Warning: GEMINI_API_KEY not found. Chatbot functionality may be limited.\")\n# Initialize the Gemini model (using gemini-2.0-flash as per instructions)\n# It's good practice to initialize this once globally or per request as needed.\nmodel = genai.GenerativeModel('gemini-2.0-flash')\n@csrf_exempt # Use this decorator for simplicity, but consider more robust CSRF handling for production APIs\ndef chat_with_gemini(request):",
        "detail": "ecommerce.chatbot.views",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "ecommerce.chatbot.views",
        "description": "ecommerce.chatbot.views",
        "peekOfCode": "model = genai.GenerativeModel('gemini-2.0-flash')\n@csrf_exempt # Use this decorator for simplicity, but consider more robust CSRF handling for production APIs\ndef chat_with_gemini(request):\n    \"\"\"\n    Handles chat messages, interacts with the Gemini API, and returns responses.\n    Maintains chat history in the session.\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get the message from the frontend (expecting JSON payload)",
        "detail": "ecommerce.chatbot.views",
        "documentation": {}
    },
    {
        "label": "django_app",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.asgi",
        "description": "ecommerce.ecommerce.asgi",
        "peekOfCode": "django_app = get_asgi_application()\n# Lazy import of FastAPI app after Django settings are configured\nfrom fastapi_app.app import app as fastapi_app\n# Create FastAPI app to mount both Django and FastAPI\napplication = FastAPI(\n    routes=[\n        Mount('/admin', app=fastapi_app),  # FastAPI at /admin/\n        Mount('/', app=django_app),  # Django at /\n    ]\n)",
        "detail": "ecommerce.ecommerce.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.asgi",
        "description": "ecommerce.ecommerce.asgi",
        "peekOfCode": "application = FastAPI(\n    routes=[\n        Mount('/admin', app=fastapi_app),  # FastAPI at /admin/\n        Mount('/', app=django_app),  # Django at /\n    ]\n)",
        "detail": "ecommerce.ecommerce.asgi",
        "documentation": {}
    },
    {
        "label": "GEMINI_API_KEY",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "GEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\nif not GEMINI_API_KEY:\n    raise ImproperlyConfigured(\"GEMINI_API_KEY not found in environment variables.\")\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',\n    'accounts.apps.AccountsConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'catalog.apps.CatalogConfig',\n    'accounts.apps.AccountsConfig',\n    'cart.apps.CartConfig',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'ecommerce.urls'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'ecommerce.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'ecommerce.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', 'ecom_prod_catalog'),\n        'USER': os.getenv('DB_USER', 'vikas'),\n        'PASSWORD': os.getenv('DB_PASSWORD', 'kalika1667'),\n        'HOST': os.getenv('DB_HOST', 'localhost'),\n        'PORT': os.getenv('DB_PORT', '5432'),\n    }",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', 'ecom_prod_catalog'),\n        'USER': os.getenv('DB_USER', 'vikas'),\n        'PASSWORD': os.getenv('DB_PASSWORD', 'kalika1667'),\n        'HOST': os.getenv('DB_HOST', 'localhost'),\n        'PORT': os.getenv('DB_PORT', '5432'),\n    }\n}",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.CustomUser'\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / \"catalog/static\"]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"mediafiles\"\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4',)\nAWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\nAWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_REGION",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_REGION = 'us-east-1'\nAWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AWS_S3_BUCKET_NAME",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "AWS_S3_BUCKET_NAME = 'kalika-ecom'\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.db'\nSESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SESSION_COOKIE_SAMESITE = 'Lax'\nPUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "PUNCHOUT_SUPPLIER_DUNS",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "PUNCHOUT_SUPPLIER_DUNS = os.getenv('PUNCHOUT_SUPPLIER_DUNS')  # From provided data\nPUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "PUNCHOUT_ANID",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "PUNCHOUT_ANID = os.getenv('PUNCHOUG_ANID') # From provided data\nPUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "PUNCHOUT_SHARED_SECRET",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "PUNCHOUT_SHARED_SECRET = \"response_secret\"  # Replace with actual secret\nPUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "PUNCHOUT_RETURN_URL",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "PUNCHOUT_RETURN_URL = \"https://ariba-network-endpoint.com/poom\"\n# Ariba PunchOut Settings\nARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ARIBA_NETWORK_ID",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ARIBA_NETWORK_ID = os.getenv('ARIBA_NETWORK_ID')\nARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ARIBA_ENDPOINT",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "ARIBA_ENDPOINT = 'https://test.ariba.com/punchout/cxml/setup'\n# --- Local Development Security Settings ---\nSECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = None\nSECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SECURE_SSL_REDIRECT = False\nSESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "SESSION_COOKIE_SECURE = False\nCSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.settings",
        "description": "ecommerce.ecommerce.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = False",
        "detail": "ecommerce.ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.urls",
        "description": "ecommerce.ecommerce.urls",
        "peekOfCode": "urlpatterns = [\n    path('django-admin/', admin.site.urls),  # Django admin\n    path('chatbot/', include('chatbot.urls')),\n    path('', include('catalog.urls')),\n    path('cart/', include('cart.urls')),\n    path('accounts/', include('accounts.urls')),\n    path('punchout/', include('punchout.urls')),\n]",
        "detail": "ecommerce.ecommerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.ecommerce.wsgi",
        "description": "ecommerce.ecommerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerce.ecommerce.wsgi",
        "documentation": {}
    },
    {
        "label": "ItemIDPayload",
        "kind": 6,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "class ItemIDPayload(BaseModel):\n    item_id: Optional[int] = None\n    item_code: Optional[str] = None\nclass ExportRequest(BaseModel):\n    export_options: List[str]\napp = FastAPI()\napp.add_middleware(SessionMiddleware, secret_key=os.getenv(SECRET_KEY))\n# Define the directory for static files, including uploaded images\nSTATIC_DIR = \"static\"\nUPLOAD_DIR = os.path.join(STATIC_DIR, \"images\", \"products\")",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "ExportRequest",
        "kind": 6,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "class ExportRequest(BaseModel):\n    export_options: List[str]\napp = FastAPI()\napp.add_middleware(SessionMiddleware, secret_key=os.getenv(SECRET_KEY))\n# Define the directory for static files, including uploaded images\nSTATIC_DIR = \"static\"\nUPLOAD_DIR = os.path.join(STATIC_DIR, \"images\", \"products\")\n# Ensure upload directory exists\nos.makedirs(UPLOAD_DIR, exist_ok=True)\napp.mount(f\"/{STATIC_DIR}\", StaticFiles(directory=STATIC_DIR), name=STATIC_DIR)",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "update_product_price_in_db",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None\n    cursor = None\n    try:\n        conn = get_db_connection()\n        if not conn:\n            logger.error(\"Database connection failed in update_product_price_in_db\")\n            return False\n        cursor = conn.cursor()",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "update_product_description_in_db",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def update_product_description_in_db(item_id: int, new_description: str):\n    \"\"\"Updates the description of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None\n    cursor = None\n    try:\n        conn = get_db_connection()\n        if not conn:\n            logger.error(\"Database connection failed in update_product_description_in_db\")\n            return False\n        cursor = conn.cursor()",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "add_product_to_db",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def add_product_to_db(product_data: dict):\n    \"\"\"\n    Adds a new product to the database, including the user-provided item_id.\n    \"\"\"\n    conn = None\n    cursor = None\n    # Clean keys, but DO NOT remove item_id\n    data = {k.lower(): v for k, v in product_data.items()}\n    # Check for required fields for an insert\n    if not data.get('item_id') or not data.get('item_code'):",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "update_product_in_db",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def update_product_in_db(item_id: int, product_data: dict):\n    \"\"\"\n    Updates an existing product in the database based on its item_id.\n    This version dynamically builds the update query from the provided data.\n    \"\"\"\n    conn = None\n    cursor = None\n    data = {k.lower().replace(' ', '_'): v for k, v in product_data.items()}\n    # Remove keys that should not be updated or identify the row\n    data.pop('item_id', None)",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "parse_item_properties",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def parse_item_properties(properties_string: str) -> dict:\n    \"\"\"\n    Parses the 'Item Properties' string into a dictionary of key-value pairs.\n    Keys are cleaned to match database column names (lowercase, no spaces).\n    \"\"\"\n    properties_dict = {}\n    if not properties_string or not isinstance(properties_string, str):\n        return properties_dict\n    parts = properties_string.split(',')\n    for part in parts:",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "delete_product_by_identifier",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def delete_product_by_identifier(item_id: int = None, item_code: str = None):\n    \"\"\"Deletes a product from the database by item_id or item_code.\n    Returns True if a row was deleted.\n    \"\"\"\n    conn = None\n    cursor = None\n    try:\n        conn = get_db_connection()\n        if not conn:\n            logger.error(\"Database connection failed in delete_product_by_identifier\")",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "get_product_by_identifier",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def get_product_by_identifier(item_id: int = None, item_code: str = None, product_title: str = None):\n    \"\"\"Fetches a single product from the database by item_id, item_code, or product_title.\"\"\"\n    conn = None\n    cursor = None\n    product_data = None\n    try:\n        conn = get_db_connection()\n        if not conn:\n            logger.error(\"Database connection failed in get_product_by_identifier\")\n            return None",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "simulate_export",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "def simulate_export(job_id: int, options: List[str]):\n    \"\"\"\n    A background task that fetches data from the database based on selected\n    options, merges them, and writes the result to a single CSV file.\n    \"\"\"\n    global export_jobs\n    try:\n        # --- 1. Determine the complete set of columns to fetch ---\n        # Base columns that are always included, with their desired CSV header names.\n        select_columns = {",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(SessionMiddleware, secret_key=os.getenv(SECRET_KEY))\n# Define the directory for static files, including uploaded images\nSTATIC_DIR = \"static\"\nUPLOAD_DIR = os.path.join(STATIC_DIR, \"images\", \"products\")\n# Ensure upload directory exists\nos.makedirs(UPLOAD_DIR, exist_ok=True)\napp.mount(f\"/{STATIC_DIR}\", StaticFiles(directory=STATIC_DIR), name=STATIC_DIR)\ntemplates = Jinja2Templates(directory=\"fastapi_app/templates\")\npwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "STATIC_DIR = \"static\"\nUPLOAD_DIR = os.path.join(STATIC_DIR, \"images\", \"products\")\n# Ensure upload directory exists\nos.makedirs(UPLOAD_DIR, exist_ok=True)\napp.mount(f\"/{STATIC_DIR}\", StaticFiles(directory=STATIC_DIR), name=STATIC_DIR)\ntemplates = Jinja2Templates(directory=\"fastapi_app/templates\")\npwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\nlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nlogger = logging.getLogger(__name__)\n# In-memory store for export jobs",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "UPLOAD_DIR = os.path.join(STATIC_DIR, \"images\", \"products\")\n# Ensure upload directory exists\nos.makedirs(UPLOAD_DIR, exist_ok=True)\napp.mount(f\"/{STATIC_DIR}\", StaticFiles(directory=STATIC_DIR), name=STATIC_DIR)\ntemplates = Jinja2Templates(directory=\"fastapi_app/templates\")\npwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\nlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nlogger = logging.getLogger(__name__)\n# In-memory store for export jobs\nexport_jobs = []",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "templates = Jinja2Templates(directory=\"fastapi_app/templates\")\npwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\nlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nlogger = logging.getLogger(__name__)\n# In-memory store for export jobs\nexport_jobs = []\njob_counter = 0\n# --- Helper functions for database operations (from your existing app.py) ---\ndef update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\nlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nlogger = logging.getLogger(__name__)\n# In-memory store for export jobs\nexport_jobs = []\njob_counter = 0\n# --- Helper functions for database operations (from your existing app.py) ---\ndef update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# In-memory store for export jobs\nexport_jobs = []\njob_counter = 0\n# --- Helper functions for database operations (from your existing app.py) ---\ndef update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None\n    cursor = None\n    try:",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "export_jobs",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "export_jobs = []\njob_counter = 0\n# --- Helper functions for database operations (from your existing app.py) ---\ndef update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None\n    cursor = None\n    try:\n        conn = get_db_connection()\n        if not conn:",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "job_counter",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.app",
        "description": "ecommerce.fastapi_app.app",
        "peekOfCode": "job_counter = 0\n# --- Helper functions for database operations (from your existing app.py) ---\ndef update_product_price_in_db(item_id: int, new_price: float):\n    \"\"\"Updates the price of a product in the database. Returns True if a row was updated.\"\"\"\n    conn = None\n    cursor = None\n    try:\n        conn = get_db_connection()\n        if not conn:\n            logger.error(\"Database connection failed in update_product_price_in_db\")",
        "detail": "ecommerce.fastapi_app.app",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port='5432'\n        )\n        logger.info(\"Database connected\")",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "view_tables_and_data",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def view_tables_and_data():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"\n        SELECT table_name",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "create_accounts_customuser_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def create_accounts_customuser_table():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        create_table_query = '''\n        CREATE TABLE IF NOT EXISTS accounts_customuser (",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "create_products_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def create_products_table():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        create_table_query = '''\n        CREATE TABLE IF NOT EXISTS products (",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "create_punchout_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def create_punchout_table():\n    create_table_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS punchout_responses (\n        id SERIAL PRIMARY KEY,\n        response TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n    \"\"\"\n    connection = None\n    cursor = None",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "insert_sample_data",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def insert_sample_data():\n    sample_response = \"\"\"<PunchOutSetupResponse>\n        <Response>\n            <Status code=\"200\" text=\"OK\" />\n        </Response>\n        <StartPage>\n            <URL>https://example.com/punchout</URL>\n        </StartPage>\n    </PunchOutSetupResponse>\"\"\"\n    connection = None",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "create_admin_user",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def create_admin_user(username, plain_password, email=\"admin@example.com\", role=\"Admin\", is_active=True):\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT id FROM accounts_customuser WHERE username = %s\", (username,))\n        if cursor.fetchone():",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "insert_sample_user_data",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def insert_sample_user_data(username, plain_password, email, role=\"User\", is_active=True):\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT id FROM accounts_customuser WHERE username = %s\", (username,))\n        if cursor.fetchone():",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "insert_sample_products",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def insert_sample_products():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM products\")\n        if cursor.fetchone()[0] == 0:",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "create_orders_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def create_orders_table():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        # Drop table if it exists to ensure schema is always correct\n        cursor.execute(\"DROP TABLE IF EXISTS orders CASCADE;\")",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_user_count",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_user_count():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return 0\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM accounts_customuser\")\n        count = cursor.fetchone()[0]",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_product_count",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_product_count():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return 0\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM products\")\n        count = cursor.fetchone()[0]",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_total_sales",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_total_sales():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return 0.0\n        cursor = connection.cursor()\n        # Sum of (price * quantity) for completed orders\n        cursor.execute(\"SELECT COALESCE(SUM(o.price * o.quantity), 0) FROM orders o WHERE o.status = 'Completed'\")",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_pending_orders_count",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_pending_orders_count():\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return 0\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM orders WHERE status = 'Pending'\")\n        count = cursor.fetchone()[0]",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_recent_orders",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_recent_orders(limit=5):\n    connection = None\n    cursor = None\n    recent_orders = []\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return []\n        cursor = connection.cursor()\n        # Fetch order details and customer username",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_product_category_counts",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "def get_product_category_counts():\n    connection = None\n    cursor = None\n    category_counts = []\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return []\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "logger = logging.getLogger(__name__)\npwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\n# Database connection parameters\ndb_host = 'localhost'\ndb_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\")\n# Database connection parameters\ndb_host = 'localhost'\ndb_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "db_host = 'localhost'\ndb_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "db_name = 'ecom_prod_catalog'\ndb_user = 'vikas'\ndb_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "db_user",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "db_user = 'vikas'\ndb_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port='5432'",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.db",
        "description": "ecommerce.fastapi_app.db",
        "peekOfCode": "db_password = 'kalika1667'\ndef get_db_connection():\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port='5432'\n        )",
        "detail": "ecommerce.fastapi_app.db",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port\n        )",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "create_users_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def create_users_table():\n    \"\"\"\n    Creates the 'users' table if it doesn't already exist.\n    This table stores user authentication and role information.\n    \"\"\"\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "create_orders_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def create_orders_table():\n    \"\"\"\n    Creates the 'orders' table if it doesn't already exist.\n    This table stores order details, linking to users and products.\n    \"\"\"\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "create_products_table",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def create_products_table():\n    \"\"\"\n    Drops the existing 'products' table and recreates it with the schema\n    that matches the 'filtered-products.csv' file, including the expanded\n    item properties as separate columns.\n    \"\"\"\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "verify_table_schema",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def verify_table_schema(table_name):\n    \"\"\"Prints the schema of a given table.\"\"\"\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:\n            return\n        cursor = connection.cursor()\n        print(f\"\\n--- Schema of '{table_name}' table ---\")",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "parse_item_properties",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def parse_item_properties(properties_string):\n    \"\"\"\n    Parses the 'Item Properties' string into a dictionary of key-value pairs.\n    Keys are cleaned to match database column names (lowercase, no spaces).\n    \"\"\"\n    properties_dict = {}\n    if not properties_string or not isinstance(properties_string, str):\n        return properties_dict\n    # Split by comma, then process each key-value pair\n    parts = properties_string.split(',')",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "insert_data_from_csv",
        "kind": 2,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "def insert_data_from_csv(file_path):\n    \"\"\"\n    Inserts data from the CSV into the 'products' table. It now parses\n    the 'Item Properties' column and inserts the data into separate columns.\n    \"\"\"\n    connection = None\n    cursor = None\n    try:\n        connection = get_db_connection()\n        if not connection:",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "db_host = os.getenv(\"DB_HOST\", \"localhost\")\ndb_name = os.getenv(\"DB_NAME\", \"ecom_prod_catalog\")\ndb_user = os.getenv(\"DB_USER\", \"vikas\")\ndb_password = os.getenv(\"DB_PASSWORD\", \"kalika1667\")\ndb_port = os.getenv(\"DB_PORT\", \"5432\")\ndef get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "db_name = os.getenv(\"DB_NAME\", \"ecom_prod_catalog\")\ndb_user = os.getenv(\"DB_USER\", \"vikas\")\ndb_password = os.getenv(\"DB_PASSWORD\", \"kalika1667\")\ndb_port = os.getenv(\"DB_PORT\", \"5432\")\ndef get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "db_user",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "db_user = os.getenv(\"DB_USER\", \"vikas\")\ndb_password = os.getenv(\"DB_PASSWORD\", \"kalika1667\")\ndb_port = os.getenv(\"DB_PORT\", \"5432\")\ndef get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "db_password = os.getenv(\"DB_PASSWORD\", \"kalika1667\")\ndb_port = os.getenv(\"DB_PORT\", \"5432\")\ndef get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "db_port",
        "kind": 5,
        "importPath": "ecommerce.fastapi_app.dbtest2",
        "description": "ecommerce.fastapi_app.dbtest2",
        "peekOfCode": "db_port = os.getenv(\"DB_PORT\", \"5432\")\ndef get_db_connection():\n    \"\"\"Establishes a connection to the PostgreSQL database.\"\"\"\n    try:\n        connection = psycopg2.connect(\n            host=db_host,\n            database=db_name,\n            user=db_user,\n            password=db_password,\n            port=db_port",
        "detail": "ecommerce.fastapi_app.dbtest2",
        "documentation": {}
    },
    {
        "label": "PunchoutConfig",
        "kind": 6,
        "importPath": "ecommerce.punchout.apps",
        "description": "ecommerce.punchout.apps",
        "peekOfCode": "class PunchoutConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'punchout'",
        "detail": "ecommerce.punchout.apps",
        "documentation": {}
    },
    {
        "label": "PunchOutOrder",
        "kind": 6,
        "importPath": "ecommerce.punchout.models",
        "description": "ecommerce.punchout.models",
        "peekOfCode": "class PunchOutOrder(models.Model):\n    order_id = models.UUIDField(default=uuid.uuid4, editable=False)\n    session_key = models.CharField(max_length=40)\n    buyer_cookie = models.CharField(max_length=255)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    created_at = models.DateTimeField(auto_now_add=True)\n    return_url = models.CharField(max_length=500)\n    buyer_identity = models.CharField(max_length=255)",
        "detail": "ecommerce.punchout.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ecommerce.punchout.urls",
        "description": "ecommerce.punchout.urls",
        "peekOfCode": "app_name = 'punchout'\nurlpatterns = [\n    path('setup/', views.punchout_setup, name='punchout_setup'),\n    path('return/', views.return_cart_to_ariba, name='return_cart_to_ariba'),\n]",
        "detail": "ecommerce.punchout.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.punchout.urls",
        "description": "ecommerce.punchout.urls",
        "peekOfCode": "urlpatterns = [\n    path('setup/', views.punchout_setup, name='punchout_setup'),\n    path('return/', views.return_cart_to_ariba, name='return_cart_to_ariba'),\n]",
        "detail": "ecommerce.punchout.urls",
        "documentation": {}
    },
    {
        "label": "punchout_setup",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def punchout_setup(request):\n    \"\"\"Handle PunchOutSetupRequest and return PunchOutSetupResponse.\"\"\"\n    if request.method == 'POST':\n        try:\n            posr_xml = request.body.decode('utf-8')\n            root = ET.fromstring(posr_xml)\n            # Extract necessary fields\n            buyer_cookie = root.find(\".//BuyerCookie\").text\n            operation = root.find(\".//PunchOutSetupRequest\").attrib.get('operation')\n            return_url = root.find(\".//BrowserFormPost/URL\").text",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "return_cart_to_ariba",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def return_cart_to_ariba(request):\n    \"\"\"Generate PunchOutOrderMessage, save to database with cXML, and send to Ariba's return URL.\"\"\"\n    if request.method != 'POST':\n        logger.warning(\"Invalid method for return_cart_to_ariba: %s\", request.method)\n        return HttpResponse(generate_error_response(\"Method not allowed\"), content_type='text/xml', status=405)\n    if not request.session.get('is_punchout', False):\n        logger.warning(\"Non-PunchOut session attempted to access return_cart_to_ariba\")\n        messages.warning(request, \"This is not a valid PunchOut session.\")\n        return redirect('cart:view_cart')\n    session_key = request.session.session_key",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "generate_punchout_response",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def generate_punchout_response(buyer_cookie, buyer_identity, supplier_identity):\n    \"\"\"Generate PunchOutSetupResponse cXML.\"\"\"\n    cxml = ET.Element('cXML', version=\"1.2.020\", payloadID=f\"response_{int(datetime.utcnow().timestamp())}\",\n                     timestamp=datetime.utcnow().isoformat() + 'Z')\n    header = ET.SubElement(cxml, 'Header')\n    from_elem = ET.SubElement(header, 'From')\n    credential_from = ET.SubElement(from_elem, 'Credential', domain=\"NetworkID\")\n    ET.SubElement(credential_from, 'Identity').text = buyer_identity\n    to_elem = ET.SubElement(header, 'To')\n    credential_to = ET.SubElement(to_elem, 'Credential', domain=\"NetworkID\")",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "generate_catalog",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def generate_catalog(request):\n    \"\"\"Generate cXML catalog from Product model and Excel data.\"\"\"\n    products = Product.objects.all()\n    cxml = ET.Element('cXML', version=\"1.2.020\", payloadID=f\"catalog_{int(datetime.utcnow().timestamp())}\",\n                     timestamp=datetime.utcnow().isoformat() + 'Z')\n    catalog = ET.SubElement(cxml, 'Message')\n    punchout_catalog = ET.SubElement(catalog, 'PunchOutCatalog')\n    supplier = ET.SubElement(punchout_catalog, 'Supplier')\n    ET.SubElement(supplier, 'SupplierID', domain=\"NetworkID\").text = settings.PUNCHOUT_ANID\n    # Add sample item from Excel file",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "generate_error_response",
        "kind": 2,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "def generate_error_response(message):\n    \"\"\"Generate error cXML response.\"\"\"\n    cxml = ET.Element('cXML', version=\"1.2.020\", payloadID=f\"error_{int(datetime.utcnow().timestamp())}\",\n                     timestamp=datetime.utcnow().isoformat() + 'Z')\n    response = ET.SubElement(cxml, 'Response')\n    status = ET.SubElement(response, 'Status', code=\"400\", text=\"Bad Request\")\n    status.text = message\n    return ET.tostring(cxml, encoding='utf-8', method='xml').decode('utf-8')",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ecommerce.punchout.views",
        "description": "ecommerce.punchout.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@csrf_exempt\ndef punchout_setup(request):\n    \"\"\"Handle PunchOutSetupRequest and return PunchOutSetupResponse.\"\"\"\n    if request.method == 'POST':\n        try:\n            posr_xml = request.body.decode('utf-8')\n            root = ET.fromstring(posr_xml)\n            # Extract necessary fields\n            buyer_cookie = root.find(\".//BuyerCookie\").text",
        "detail": "ecommerce.punchout.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ecommerce.manage",
        "description": "ecommerce.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "ecommerce.manage",
        "documentation": {}
    }
]